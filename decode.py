import os
import numpy as np
from PIL import Image
import zipfile


def decode_image_to_data(image_path):
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –±–∏–Ω–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è,
    —É—á–∏—Ç—ã–≤–∞—è –ø–µ—Ä–≤—ã–µ 4 –±–∞–π—Ç–∞ (big-endian) –∫–∞–∫ –¥–ª–∏–Ω—É –ø–æ–ª–µ–∑–Ω–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏.
    """
    img = Image.open(image_path)
    img_array = np.array(img)

    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –±–∞–π—Ç—ã –≤ –æ–¥–∏–Ω –º–∞—Å—Å–∏–≤
    data_bytes = bytearray()
    height, width, _ = img_array.shape

    for i in range(height):
        for j in range(width):
            # –ò–∑–≤–ª–µ–∫–∞–µ–º R, G, B
            pixel = img_array[i, j]
            data_bytes.extend(pixel)

    # –ü—Ä–µ–≤—Ä–∞—â–∞–µ–º –≤ bytes
    all_data = bytes(data_bytes)

    # –ü–µ—Ä–≤—ã–µ 4 –±–∞–π—Ç–∞ ‚Äì —ç—Ç–æ –¥–ª–∏–Ω–∞ (big-endian)
    if len(all_data) < 4:
        raise ValueError("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–æ–µ –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–æ (–Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —Ö–æ—Ç—è –±—ã 4 –±–∞–π—Ç).")
    data_length = int.from_bytes(all_data[:4], byteorder='big')

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–ª–∏–Ω—ã
    if data_length > (len(all_data) - 4):
        raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–ª–∏–Ω–∞ –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ —Ñ–∞–π–ª –ø–æ–≤—Ä–µ–∂–¥–µ–Ω.")

    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–æ–≤–Ω–æ data_length –±–∞–π—Ç
    real_data = all_data[4:4 + data_length]
    return real_data


def restore_from_images(input_folder, output_folder):
    """
    –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç ZIP-–∞—Ä—Ö–∏–≤ –∏–∑ –Ω–∞–±–æ—Ä–∞ PNG-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    –∏ —Ä–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ—Ç –µ–≥–æ –≤ output_folder.
    """
    if not os.path.exists(output_folder):
        os.makedirs(output_folder)

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –Ω–æ–º–µ—Ä—É —á–∞—Å—Ç–∏
    image_files = sorted(
        [f for f in os.listdir(input_folder) if f.startswith("encoded_part_") and f.endswith(".png")],
        key=lambda x: int(x.split("_")[-1].split(".")[0])
    )

    if not image_files:
        print("‚ùå –ù–µ—Ç –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –ø–∞–ø–∫–µ:", input_folder)
        return

    print("üîç –î–µ–∫–æ–¥–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
    parts_data = []
    for img_file in image_files:
        img_path = os.path.join(input_folder, img_file)
        try:
            decoded = decode_image_to_data(img_path)
            parts_data.append(decoded)
            print(f"   ‚Üí –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {img_file}")
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ {img_file}: {e}")
            return

    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —á–∞—Å—Ç–∏ –≤ –æ–¥–∏–Ω ZIP-—Ñ–∞–π–ª
    zip_path = os.path.join(output_folder, "restored.zip")
    with open(zip_path, "wb") as f:
        for part in parts_data:
            f.write(part)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ ZIP-–∞—Ä—Ö–∏–≤–æ–º
    if not zipfile.is_zipfile(zip_path):
        print("‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ZIP. –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
        print("   1. –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –±—ã–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω—ã –∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω—ã.")
        print("   2. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –¥—Ä—É–≥–æ–π –º–µ—Ç–æ–¥ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è (–Ω–µ —Ç–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è).")
        print(f"   –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∫–∞–∫ '{zip_path}'. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ä–∞—Å–ø–∞–∫–æ–≤–∞—Ç—å –≤—Ä—É—á–Ω—É—é.")
        return

    # –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –∞—Ä—Ö–∏–≤
    print("üì¶ –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞—é –∞—Ä—Ö–∏–≤...")
    try:
        with zipfile.ZipFile(zip_path, "r") as zip_ref:
            zip_ref.extractall(output_folder)
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ! –§–∞–π–ª—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤: {output_folder}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø–∞–∫–æ–≤–∫–µ: {e}")
    finally:
        # –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–∞–º ZIP, –ø—Ä–æ—Å—Ç–æ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ —Å—Ç—Ä–æ—á–∫—É –Ω–∏–∂–µ
        os.remove(zip_path)


if __name__ == "__main__":
    # –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (—Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ):
    restore_from_images(
        input_folder="encoded_images",
        output_folder="restored_files"
    )
    pass
